{"version":3,"file":"js/addon-entry-editor-stepping.js","sources":["webpack://GUI/./src/addons/addons/editor-stepping/_runtime_entry.js","webpack://GUI/./src/addons/addons/editor-stepping/userscript.js"],"sourcesContent":["/* generated by pull.js */\nimport _import0 from \"./userscript.js\";\nexport const resources = {\n  \"userscript.js\": _import0,\n};\n","export default async function ({ addon, global, console }) {\n  const vm = addon.tab.traps.vm;\n\n  const setColor = () =>\n    document.getElementById(\"editor-stepping-flood\").setAttribute(\"flood-color\", addon.settings.get(\"highlight-color\"));\n\n  document.body.insertAdjacentHTML(\n    \"beforeend\",\n    `\n<svg style=\"position: fixed; top: -999999%;\">\n  <filter id=\"colorStackGlow\" height=\"160%\" width=\"180%\" y=\"-30%\" x=\"-40%\">\n    <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"4\">\n    </feGaussianBlur>\n\n    <feComponentTransfer result=\"outBlur\">\n      <feFuncA type=\"table\" tableValues=\"0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\">\n      </feFuncA>\n    </feComponentTransfer>\n\n    <feFlood id=\"editor-stepping-flood\" flood-color=\"blue\" flood-opacity=\"1\" result=\"outColor\">\n    </feFlood>\n\n    <feComposite in=\"outColor\" in2=\"outBlur\" operator=\"in\" result=\"outGlow\">\n    </feComposite>\n\n    <feComposite in=\"SourceGraphic\" in2=\"outGlow\" operator=\"over\">\n    </feComposite>\n  </filter>\n</svg>\n`\n  );\n  setColor();\n  // Wait for Blockly, as it tends to not be ready sometimes...\n  await addon.tab.traps.getBlockly();\n  const elementsWithFilter = new Set();\n  const oldStep = vm.runtime.constructor.prototype._step;\n  vm.runtime.constructor.prototype._step = function (...args) {\n    oldStep.call(this, ...args);\n    for (const el of elementsWithFilter) {\n      el.style.filter = \"\";\n    }\n    elementsWithFilter.clear();\n    if (!addon.self.disabled) {\n      vm.runtime.threads.forEach((thread) => {\n        if (thread.isCompiled) return;\n        if (thread.target.blocks.forceNoGlow) return;\n        thread.stack.forEach((blockId) => {\n          const block = Blockly.getMainWorkspace().getBlockById(blockId);\n          if (!block) {\n            return;\n          }\n          const childblock = thread.stack.find((i) => {\n            let b = block;\n            while (b.childBlocks_.length) {\n              b = b.childBlocks_[b.childBlocks_.length - 1];\n              if (i === b.id) return true;\n            }\n            return false;\n          });\n          if (!childblock && block.svgPath_) {\n            const svgPath = block.svgPath_;\n            svgPath.style.filter = \"url(#colorStackGlow)\";\n            elementsWithFilter.add(svgPath);\n          }\n        });\n      });\n    }\n  };\n\n  addon.settings.addEventListener(\"change\", setColor);\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAyBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}